// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: galaxy/brand/brand.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Brand struct {
	// id defines unique identifier of brand
	// [a-zA-Z0-9]{1,30}
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// brand_address defines bech32 address of brand
	BrandAddress string `protobuf:"bytes,2,opt,name=brand_address,json=brandAddress,proto3" json:"brand_address,omitempty"`
	// owner defines owner address of brand
	Owner       string           `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Description BrandDescription `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
}

func (m *Brand) Reset()         { *m = Brand{} }
func (m *Brand) String() string { return proto.CompactTextString(m) }
func (*Brand) ProtoMessage()    {}
func (*Brand) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5cf79a714a1205b, []int{0}
}
func (m *Brand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Brand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Brand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Brand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brand.Merge(m, src)
}
func (m *Brand) XXX_Size() int {
	return m.Size()
}
func (m *Brand) XXX_DiscardUnknown() {
	xxx_messageInfo_Brand.DiscardUnknown(m)
}

var xxx_messageInfo_Brand proto.InternalMessageInfo

func (m *Brand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Brand) GetBrandAddress() string {
	if m != nil {
		return m.BrandAddress
	}
	return ""
}

func (m *Brand) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Brand) GetDescription() BrandDescription {
	if m != nil {
		return m.Description
	}
	return BrandDescription{}
}

type BrandDescription struct {
	// name defines name of brand
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// details defines detail of brand
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// brand_image_uri defines a url that points to brand image
	BrandImageUri string `protobuf:"bytes,3,opt,name=brand_image_uri,json=brandImageUri,proto3" json:"brand_image_uri,omitempty"`
}

func (m *BrandDescription) Reset()         { *m = BrandDescription{} }
func (m *BrandDescription) String() string { return proto.CompactTextString(m) }
func (*BrandDescription) ProtoMessage()    {}
func (*BrandDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5cf79a714a1205b, []int{1}
}
func (m *BrandDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandDescription.Merge(m, src)
}
func (m *BrandDescription) XXX_Size() int {
	return m.Size()
}
func (m *BrandDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandDescription.DiscardUnknown(m)
}

var xxx_messageInfo_BrandDescription proto.InternalMessageInfo

func (m *BrandDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BrandDescription) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *BrandDescription) GetBrandImageUri() string {
	if m != nil {
		return m.BrandImageUri
	}
	return ""
}

func init() {
	proto.RegisterType((*Brand)(nil), "galaxy.brand.Brand")
	proto.RegisterType((*BrandDescription)(nil), "galaxy.brand.BrandDescription")
}

func init() { proto.RegisterFile("galaxy/brand/brand.proto", fileDescriptor_e5cf79a714a1205b) }

var fileDescriptor_e5cf79a714a1205b = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4a, 0x33, 0x31,
	0x14, 0xc5, 0x27, 0xfd, 0xda, 0x4f, 0x4c, 0xeb, 0x1f, 0x42, 0x17, 0xb1, 0x8b, 0x58, 0xba, 0x90,
	0x6e, 0x3a, 0x03, 0xba, 0x76, 0xe1, 0x20, 0x8a, 0xdb, 0x11, 0x37, 0x6e, 0x4a, 0xa6, 0x09, 0x69,
	0xa0, 0x33, 0x29, 0x49, 0x8a, 0xed, 0x5b, 0xf8, 0x30, 0x3e, 0x44, 0x57, 0x52, 0x5c, 0xb9, 0x12,
	0xe9, 0xbc, 0x88, 0x4c, 0x12, 0xb1, 0xb8, 0x71, 0x33, 0xdc, 0x7b, 0xcf, 0xb9, 0x97, 0xf9, 0xe5,
	0x40, 0x2c, 0xe8, 0x8c, 0x2e, 0x57, 0x49, 0xae, 0x69, 0xc9, 0xfc, 0x37, 0x9e, 0x6b, 0x65, 0x15,
	0xea, 0x78, 0x25, 0x76, 0xb3, 0x5e, 0x57, 0x28, 0xa1, 0x9c, 0x90, 0xd4, 0x95, 0xf7, 0xf4, 0x4e,
	0x26, 0xca, 0x14, 0xca, 0x8c, 0xbd, 0xe0, 0x1b, 0x2f, 0x0d, 0x5e, 0x01, 0x6c, 0xa5, 0xf5, 0x2a,
	0x3a, 0x84, 0x0d, 0xc9, 0x30, 0xe8, 0x83, 0xe1, 0x7e, 0xd6, 0x90, 0x0c, 0x5d, 0xc2, 0x03, 0x77,
	0x73, 0x4c, 0x19, 0xd3, 0xdc, 0x18, 0xdc, 0xa8, 0xa5, 0x14, 0xbf, 0xbd, 0x8c, 0xba, 0xe1, 0xc4,
	0x95, 0x57, 0xee, 0xad, 0x96, 0xa5, 0xc8, 0x3a, 0xce, 0x1e, 0x66, 0x28, 0x86, 0x2d, 0xf5, 0x54,
	0x72, 0x8d, 0xff, 0xfd, 0xb1, 0xe6, 0x6d, 0xe8, 0x06, 0xb6, 0x19, 0x37, 0x13, 0x2d, 0xe7, 0x56,
	0xaa, 0x12, 0x37, 0xfb, 0x60, 0xd8, 0x3e, 0x27, 0xf1, 0x2e, 0x5d, 0xec, 0x7e, 0xf4, 0xfa, 0xc7,
	0x95, 0x36, 0xd7, 0x1f, 0xa7, 0x51, 0xb6, 0xbb, 0x38, 0x98, 0xc2, 0xe3, 0xdf, 0x36, 0x84, 0x60,
	0xb3, 0xa4, 0x05, 0x0f, 0x70, 0xae, 0x46, 0x18, 0xee, 0x31, 0x6e, 0xa9, 0x9c, 0x05, 0xb0, 0xec,
	0xbb, 0x45, 0x67, 0xf0, 0xc8, 0x83, 0xcb, 0x82, 0x0a, 0x3e, 0x5e, 0x68, 0xe9, 0x19, 0x32, 0xff,
	0x1e, 0x77, 0xf5, 0xf4, 0x41, 0xcb, 0xf4, 0x76, 0xbd, 0x25, 0x60, 0xb3, 0x25, 0xe0, 0x73, 0x4b,
	0xc0, 0x73, 0x45, 0xa2, 0x4d, 0x45, 0xa2, 0xf7, 0x8a, 0x44, 0x8f, 0x23, 0x21, 0xed, 0x74, 0x91,
	0xc7, 0x13, 0x55, 0x24, 0x0e, 0x40, 0x72, 0x33, 0x9a, 0xd1, 0xdc, 0x24, 0x21, 0xc6, 0x65, 0x08,
	0xd2, 0xae, 0xe6, 0xdc, 0xe4, 0xff, 0x5d, 0x14, 0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf5,
	0x2e, 0x80, 0x43, 0xe5, 0x01, 0x00, 0x00,
}

func (m *Brand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Brand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Brand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBrand(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BrandAddress) > 0 {
		i -= len(m.BrandAddress)
		copy(dAtA[i:], m.BrandAddress)
		i = encodeVarintBrand(dAtA, i, uint64(len(m.BrandAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BrandDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BrandImageUri) > 0 {
		i -= len(m.BrandImageUri)
		copy(dAtA[i:], m.BrandImageUri)
		i = encodeVarintBrand(dAtA, i, uint64(len(m.BrandImageUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBrand(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrand(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrand(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Brand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.BrandAddress)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = m.Description.Size()
	n += 1 + l + sovBrand(uint64(l))
	return n
}

func (m *BrandDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	l = len(m.BrandImageUri)
	if l > 0 {
		n += 1 + l + sovBrand(uint64(l))
	}
	return n
}

func sovBrand(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrand(x uint64) (n int) {
	return sovBrand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Brand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Brand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Brand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandImageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandImageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrand
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrand
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrand
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrand        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrand          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrand = fmt.Errorf("proto: unexpected end of group")
)
