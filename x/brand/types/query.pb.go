// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: galaxy/brand/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryBrandsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBrandsRequest) Reset()         { *m = QueryBrandsRequest{} }
func (m *QueryBrandsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBrandsRequest) ProtoMessage()    {}
func (*QueryBrandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6efb8fb3a35e25f0, []int{0}
}
func (m *QueryBrandsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrandsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrandsRequest.Merge(m, src)
}
func (m *QueryBrandsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrandsRequest proto.InternalMessageInfo

func (m *QueryBrandsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBrandsResponse struct {
	Brands     []Brand             `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBrandsResponse) Reset()         { *m = QueryBrandsResponse{} }
func (m *QueryBrandsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBrandsResponse) ProtoMessage()    {}
func (*QueryBrandsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6efb8fb3a35e25f0, []int{1}
}
func (m *QueryBrandsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrandsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrandsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrandsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrandsResponse.Merge(m, src)
}
func (m *QueryBrandsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrandsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrandsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrandsResponse proto.InternalMessageInfo

func (m *QueryBrandsResponse) GetBrands() []Brand {
	if m != nil {
		return m.Brands
	}
	return nil
}

func (m *QueryBrandsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBrandRequest struct {
	BrandId string `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
}

func (m *QueryBrandRequest) Reset()         { *m = QueryBrandRequest{} }
func (m *QueryBrandRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBrandRequest) ProtoMessage()    {}
func (*QueryBrandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6efb8fb3a35e25f0, []int{2}
}
func (m *QueryBrandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrandRequest.Merge(m, src)
}
func (m *QueryBrandRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrandRequest proto.InternalMessageInfo

func (m *QueryBrandRequest) GetBrandId() string {
	if m != nil {
		return m.BrandId
	}
	return ""
}

type QueryBrandResponse struct {
	Brand Brand `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand"`
}

func (m *QueryBrandResponse) Reset()         { *m = QueryBrandResponse{} }
func (m *QueryBrandResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBrandResponse) ProtoMessage()    {}
func (*QueryBrandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6efb8fb3a35e25f0, []int{3}
}
func (m *QueryBrandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrandResponse.Merge(m, src)
}
func (m *QueryBrandResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrandResponse proto.InternalMessageInfo

func (m *QueryBrandResponse) GetBrand() Brand {
	if m != nil {
		return m.Brand
	}
	return Brand{}
}

type QueryBrandsByOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBrandsByOwnerRequest) Reset()         { *m = QueryBrandsByOwnerRequest{} }
func (m *QueryBrandsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBrandsByOwnerRequest) ProtoMessage()    {}
func (*QueryBrandsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6efb8fb3a35e25f0, []int{4}
}
func (m *QueryBrandsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrandsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrandsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrandsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrandsByOwnerRequest.Merge(m, src)
}
func (m *QueryBrandsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrandsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrandsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrandsByOwnerRequest proto.InternalMessageInfo

func (m *QueryBrandsByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryBrandsByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBrandsByOwnerResponse struct {
	Brands     []Brand             `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBrandsByOwnerResponse) Reset()         { *m = QueryBrandsByOwnerResponse{} }
func (m *QueryBrandsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBrandsByOwnerResponse) ProtoMessage()    {}
func (*QueryBrandsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6efb8fb3a35e25f0, []int{5}
}
func (m *QueryBrandsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrandsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrandsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrandsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrandsByOwnerResponse.Merge(m, src)
}
func (m *QueryBrandsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrandsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrandsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrandsByOwnerResponse proto.InternalMessageInfo

func (m *QueryBrandsByOwnerResponse) GetBrands() []Brand {
	if m != nil {
		return m.Brands
	}
	return nil
}

func (m *QueryBrandsByOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryBrandsRequest)(nil), "galaxy.brand.QueryBrandsRequest")
	proto.RegisterType((*QueryBrandsResponse)(nil), "galaxy.brand.QueryBrandsResponse")
	proto.RegisterType((*QueryBrandRequest)(nil), "galaxy.brand.QueryBrandRequest")
	proto.RegisterType((*QueryBrandResponse)(nil), "galaxy.brand.QueryBrandResponse")
	proto.RegisterType((*QueryBrandsByOwnerRequest)(nil), "galaxy.brand.QueryBrandsByOwnerRequest")
	proto.RegisterType((*QueryBrandsByOwnerResponse)(nil), "galaxy.brand.QueryBrandsByOwnerResponse")
}

func init() { proto.RegisterFile("galaxy/brand/query.proto", fileDescriptor_6efb8fb3a35e25f0) }

var fileDescriptor_6efb8fb3a35e25f0 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xef, 0x54, 0x5b, 0x75, 0x56, 0x0f, 0xce, 0x16, 0x69, 0xc3, 0x9a, 0x76, 0x03, 0xda, 0x22,
	0x74, 0x86, 0xd6, 0x4f, 0x60, 0x40, 0x17, 0x4f, 0x6a, 0xbc, 0x89, 0x50, 0x26, 0x9b, 0x21, 0x06,
	0xbb, 0x99, 0x6c, 0x26, 0xd5, 0x0d, 0xe2, 0xc5, 0x9b, 0x37, 0x65, 0x2f, 0x7e, 0x10, 0x3f, 0xc4,
	0x1e, 0x17, 0xbd, 0x78, 0x12, 0x69, 0xfd, 0x0a, 0xde, 0x25, 0x6f, 0x26, 0x6e, 0xe3, 0xb6, 0xbb,
	0xe0, 0xc5, 0x4b, 0xe9, 0xf0, 0x7e, 0xef, 0xf7, 0xe7, 0xbd, 0xd7, 0xe2, 0x76, 0xc8, 0xa7, 0xfc,
	0x20, 0x67, 0x7e, 0xca, 0xe3, 0x80, 0xed, 0xcf, 0x44, 0x9a, 0xd3, 0x24, 0x95, 0x99, 0x24, 0x57,
	0x75, 0x85, 0x42, 0xc5, 0x6a, 0x85, 0x32, 0x94, 0x50, 0x60, 0xc5, 0x37, 0x8d, 0xb1, 0xaa, 0xdd,
	0xf0, 0x69, 0x2a, 0x77, 0x76, 0xa5, 0xda, 0x93, 0x8a, 0xf9, 0x5c, 0x09, 0x4d, 0xcb, 0x5e, 0x8d,
	0x7c, 0x91, 0xf1, 0x11, 0x4b, 0x78, 0x18, 0xc5, 0x3c, 0x8b, 0x64, 0x6c, 0xb0, 0x1d, 0x8d, 0x9d,
	0x68, 0x7a, 0xfd, 0x30, 0xa5, 0xad, 0x50, 0xca, 0x70, 0x2a, 0x18, 0x4f, 0x22, 0xc6, 0xe3, 0x58,
	0x66, 0xd0, 0x67, 0xaa, 0xce, 0x73, 0x4c, 0x9e, 0x14, 0xd4, 0x6e, 0x21, 0xac, 0x3c, 0xb1, 0x3f,
	0x13, 0x2a, 0x23, 0x0f, 0x30, 0x3e, 0x91, 0x68, 0xa3, 0x1e, 0x1a, 0x6c, 0x8c, 0x6f, 0x53, 0x43,
	0x5b, 0xf8, 0xa1, 0x3a, 0xa6, 0xf1, 0x43, 0x1f, 0xf3, 0x50, 0x98, 0x5e, 0x6f, 0xa9, 0xd3, 0xf9,
	0x88, 0xf0, 0x66, 0x85, 0x5e, 0x25, 0x32, 0x56, 0x82, 0x8c, 0x70, 0x13, 0x92, 0xaa, 0x36, 0xea,
	0x5d, 0x18, 0x6c, 0x8c, 0x37, 0xe9, 0xf2, 0xa4, 0x28, 0xa0, 0xdd, 0x8b, 0x47, 0xdf, 0xbb, 0x35,
	0xcf, 0x00, 0xc9, 0x4e, 0xc5, 0x52, 0x1d, 0x2c, 0xf5, 0xcf, 0xb5, 0xa4, 0xf5, 0x2a, 0x9e, 0x28,
	0xbe, 0x7e, 0x62, 0xa9, 0x0c, 0xdc, 0xc1, 0x97, 0x41, 0x67, 0x12, 0x05, 0x10, 0xf7, 0x8a, 0x77,
	0x09, 0xde, 0x0f, 0x03, 0xe7, 0xfe, 0xf2, 0x84, 0xfe, 0x24, 0x60, 0xb8, 0x01, 0x00, 0x33, 0x9c,
	0x33, 0x02, 0x68, 0x9c, 0x73, 0x88, 0x70, 0x67, 0x69, 0x14, 0x6e, 0xfe, 0xe8, 0x75, 0x2c, 0xd2,
	0x52, 0x9f, 0xe2, 0x86, 0x2c, 0xde, 0x5a, 0xdc, 0x6d, 0x7f, 0xf9, 0x3c, 0x6c, 0x99, 0x6c, 0xf7,
	0x82, 0x20, 0x15, 0x4a, 0x3d, 0xcd, 0xd2, 0x28, 0x0e, 0x3d, 0x0d, 0xfb, 0x6b, 0x41, 0xf5, 0x7f,
	0x5e, 0xd0, 0x27, 0x84, 0xad, 0x55, 0xae, 0xfe, 0xff, 0x9e, 0xc6, 0xbf, 0xea, 0xb8, 0x01, 0xd6,
	0xc8, 0x4b, 0xdc, 0xd4, 0xf6, 0x48, 0xaf, 0xaa, 0x7f, 0xfa, 0x72, 0xad, 0xed, 0x33, 0x10, 0x5a,
	0xc4, 0xd9, 0x7a, 0xf7, 0xf5, 0xe7, 0x61, 0xfd, 0x06, 0x69, 0xb1, 0xd3, 0x3f, 0x3d, 0x45, 0x14,
	0x6e, 0x00, 0x9e, 0x74, 0xd7, 0x31, 0x95, 0x52, 0xbd, 0xf5, 0x00, 0xa3, 0xd4, 0x07, 0xa5, 0x6d,
	0xd2, 0x5d, 0xa5, 0xc4, 0xde, 0x94, 0x17, 0xf7, 0x96, 0xbc, 0x47, 0xf8, 0x5a, 0x65, 0x03, 0xa4,
	0xbf, 0x36, 0x47, 0xf5, 0x72, 0xac, 0xc1, 0xf9, 0x40, 0xe3, 0xe6, 0x16, 0xb8, 0xe9, 0x92, 0x9b,
	0x2b, 0xdd, 0xf8, 0xf9, 0x04, 0x4e, 0xcb, 0xdd, 0x39, 0x9a, 0xdb, 0xe8, 0x78, 0x6e, 0xa3, 0x1f,
	0x73, 0x1b, 0x7d, 0x58, 0xd8, 0xb5, 0xe3, 0x85, 0x5d, 0xfb, 0xb6, 0xb0, 0x6b, 0xcf, 0x86, 0x61,
	0x94, 0xbd, 0x98, 0xf9, 0x74, 0x57, 0xee, 0x69, 0x8a, 0x48, 0xa8, 0xe1, 0x94, 0xfb, 0xaa, 0x24,
	0x3c, 0x30, 0x94, 0x59, 0x9e, 0x08, 0xe5, 0x37, 0xe1, 0x1f, 0xe6, 0xee, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb0, 0x6f, 0x6d, 0x01, 0x20, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Brands queries all Brands
	Brands(ctx context.Context, in *QueryBrandsRequest, opts ...grpc.CallOption) (*QueryBrandsResponse, error)
	// Brand queries and Brand based on it's id
	Brand(ctx context.Context, in *QueryBrandRequest, opts ...grpc.CallOption) (*QueryBrandResponse, error)
	// BrandsByOwner queries all Brands by owner address
	BrandsByOwner(ctx context.Context, in *QueryBrandsByOwnerRequest, opts ...grpc.CallOption) (*QueryBrandsByOwnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Brands(ctx context.Context, in *QueryBrandsRequest, opts ...grpc.CallOption) (*QueryBrandsResponse, error) {
	out := new(QueryBrandsResponse)
	err := c.cc.Invoke(ctx, "/galaxy.brand.Query/Brands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Brand(ctx context.Context, in *QueryBrandRequest, opts ...grpc.CallOption) (*QueryBrandResponse, error) {
	out := new(QueryBrandResponse)
	err := c.cc.Invoke(ctx, "/galaxy.brand.Query/Brand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BrandsByOwner(ctx context.Context, in *QueryBrandsByOwnerRequest, opts ...grpc.CallOption) (*QueryBrandsByOwnerResponse, error) {
	out := new(QueryBrandsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/galaxy.brand.Query/BrandsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Brands queries all Brands
	Brands(context.Context, *QueryBrandsRequest) (*QueryBrandsResponse, error)
	// Brand queries and Brand based on it's id
	Brand(context.Context, *QueryBrandRequest) (*QueryBrandResponse, error)
	// BrandsByOwner queries all Brands by owner address
	BrandsByOwner(context.Context, *QueryBrandsByOwnerRequest) (*QueryBrandsByOwnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Brands(ctx context.Context, req *QueryBrandsRequest) (*QueryBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Brands not implemented")
}
func (*UnimplementedQueryServer) Brand(ctx context.Context, req *QueryBrandRequest) (*QueryBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Brand not implemented")
}
func (*UnimplementedQueryServer) BrandsByOwner(ctx context.Context, req *QueryBrandsByOwnerRequest) (*QueryBrandsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandsByOwner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Brands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Brands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galaxy.brand.Query/Brands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Brands(ctx, req.(*QueryBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Brand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Brand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galaxy.brand.Query/Brand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Brand(ctx, req.(*QueryBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BrandsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrandsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BrandsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galaxy.brand.Query/BrandsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BrandsByOwner(ctx, req.(*QueryBrandsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "galaxy.brand.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Brands",
			Handler:    _Query_Brands_Handler,
		},
		{
			MethodName: "Brand",
			Handler:    _Query_Brand_Handler,
		},
		{
			MethodName: "BrandsByOwner",
			Handler:    _Query_BrandsByOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "galaxy/brand/query.proto",
}

func (m *QueryBrandsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrandsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrandsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrandsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrandsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrandsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Brands) > 0 {
		for iNdEx := len(m.Brands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Brands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BrandId) > 0 {
		i -= len(m.BrandId)
		copy(dAtA[i:], m.BrandId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BrandId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrandResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrandResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Brand.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBrandsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrandsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrandsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrandsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrandsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrandsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Brands) > 0 {
		for iNdEx := len(m.Brands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Brands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBrandsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrandsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Brands) > 0 {
		for _, e := range m.Brands {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Brand.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBrandsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrandsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Brands) > 0 {
		for _, e := range m.Brands {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBrandsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrandsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrandsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrandsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrandsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrandsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brands = append(m.Brands, Brand{})
			if err := m.Brands[len(m.Brands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Brand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrandsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrandsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrandsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrandsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrandsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrandsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brands = append(m.Brands, Brand{})
			if err := m.Brands[len(m.Brands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
