// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: galaxy/clairdrop/clairdrop.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimAction int32

const (
	Delegate ClaimAction = 0
	Vote     ClaimAction = 1
	Story    ClaimAction = 2
	Nft      ClaimAction = 3
)

var ClaimAction_name = map[int32]string{
	0: "Delegate",
	1: "Vote",
	2: "Story",
	3: "Nft",
}

var ClaimAction_value = map[string]int32{
	"Delegate": 0,
	"Vote":     1,
	"Story":    2,
	"Nft":      3,
}

func (x ClaimAction) String() string {
	return proto.EnumName(ClaimAction_name, int32(x))
}

func (ClaimAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_533fbb123bd0afd3, []int{0}
}

type ClaimRecord struct {
	// address of claim user
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// total initial claimable amount for the user
	InitalClaimableAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=inital_claimable_amount,json=initalClaimableAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"inital_claimable_amount"`
	// true if action is completed
	// index of bool in array refers to claim action eunm
	ActionCompleted []bool `protobuf:"varint,3,rep,packed,name=action_completed,json=actionCompleted,proto3" json:"action_completed,omitempty"`
}

func (m *ClaimRecord) Reset()         { *m = ClaimRecord{} }
func (m *ClaimRecord) String() string { return proto.CompactTextString(m) }
func (*ClaimRecord) ProtoMessage()    {}
func (*ClaimRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_533fbb123bd0afd3, []int{0}
}
func (m *ClaimRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRecord.Merge(m, src)
}
func (m *ClaimRecord) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRecord proto.InternalMessageInfo

func (m *ClaimRecord) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClaimRecord) GetInitalClaimableAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.InitalClaimableAmount
	}
	return nil
}

func (m *ClaimRecord) GetActionCompleted() []bool {
	if m != nil {
		return m.ActionCompleted
	}
	return nil
}

func init() {
	proto.RegisterEnum("galaxy.clairdrop.ClaimAction", ClaimAction_name, ClaimAction_value)
	proto.RegisterType((*ClaimRecord)(nil), "galaxy.clairdrop.ClaimRecord")
}

func init() { proto.RegisterFile("galaxy/clairdrop/clairdrop.proto", fileDescriptor_533fbb123bd0afd3) }

var fileDescriptor_533fbb123bd0afd3 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xa6, 0xd0, 0xd6, 0x45, 0x22, 0xb2, 0x40, 0x84, 0x0e, 0x6e, 0xc4, 0x14, 0x90,
	0x88, 0x29, 0x7c, 0x00, 0xd4, 0x86, 0x0d, 0x89, 0x21, 0x48, 0x0c, 0x2c, 0x95, 0x93, 0x98, 0x60,
	0x35, 0xc9, 0x8b, 0x62, 0x17, 0xda, 0xf9, 0x96, 0x1b, 0xef, 0x3b, 0xdc, 0x76, 0x9f, 0xa4, 0x63,
	0xc7, 0x4e, 0x77, 0xa7, 0xf6, 0x8b, 0x9c, 0x1a, 0xa7, 0x77, 0x9d, 0xfc, 0xde, 0xff, 0x3d, 0xeb,
	0xe7, 0xbf, 0xff, 0xd8, 0xcb, 0x78, 0xce, 0x57, 0x6b, 0x96, 0xe4, 0x5c, 0xd6, 0x69, 0x0d, 0xd5,
	0x53, 0x15, 0x54, 0x35, 0x68, 0x20, 0x8e, 0xd9, 0x08, 0x1e, 0xf5, 0xd1, 0xab, 0x0c, 0x32, 0x68,
	0x86, 0xec, 0x58, 0x99, 0xbd, 0x11, 0x4d, 0x40, 0x15, 0xa0, 0x58, 0xcc, 0x95, 0x60, 0xff, 0x26,
	0xb1, 0xd0, 0x7c, 0xc2, 0x12, 0x90, 0xa5, 0x99, 0xbf, 0xdb, 0x21, 0x3c, 0x0c, 0x73, 0x2e, 0x8b,
	0x48, 0x24, 0x50, 0xa7, 0xc4, 0xc5, 0x3d, 0x9e, 0xa6, 0xb5, 0x50, 0xca, 0x45, 0x1e, 0xf2, 0x07,
	0xd1, 0xa9, 0x25, 0x17, 0x08, 0xbf, 0x91, 0xa5, 0xd4, 0x3c, 0x9f, 0x1f, 0xa1, 0x05, 0x8f, 0x73,
	0x31, 0xe7, 0x05, 0x2c, 0x4b, 0xed, 0x76, 0x3c, 0xdb, 0x1f, 0x7e, 0x7e, 0x1b, 0x18, 0x58, 0x70,
	0x84, 0x05, 0x2d, 0x2c, 0x08, 0x41, 0x96, 0xb3, 0x4f, 0x9b, 0xdb, 0xb1, 0x75, 0x73, 0x37, 0xf6,
	0x33, 0xa9, 0xff, 0x2e, 0xe3, 0x20, 0x81, 0x82, 0xb5, 0x2f, 0x33, 0xc7, 0x47, 0x95, 0x2e, 0x98,
	0x5e, 0x57, 0x42, 0x35, 0x17, 0x54, 0xf4, 0xda, 0xb0, 0xc2, 0x13, 0x6a, 0xda, 0x90, 0xc8, 0x7b,
	0xec, 0xf0, 0x44, 0x4b, 0x28, 0xe7, 0x09, 0x14, 0x55, 0x2e, 0xb4, 0x48, 0x5d, 0xdb, 0xb3, 0xfd,
	0x7e, 0xf4, 0xd2, 0xe8, 0xe1, 0x49, 0xfe, 0xf0, 0xb5, 0x75, 0x36, 0x6d, 0x74, 0xf2, 0x02, 0xf7,
	0xbf, 0x89, 0x5c, 0x64, 0x5c, 0x0b, 0xc7, 0x22, 0x7d, 0xdc, 0xfd, 0x05, 0x5a, 0x38, 0x88, 0x0c,
	0xf0, 0xb3, 0x9f, 0x1a, 0xea, 0xb5, 0xd3, 0x21, 0x3d, 0x6c, 0xff, 0xf8, 0xa3, 0x1d, 0x7b, 0xd4,
	0xbd, 0xbc, 0xa6, 0xd6, 0xec, 0xfb, 0x66, 0x4f, 0xd1, 0x76, 0x4f, 0xd1, 0xfd, 0x9e, 0xa2, 0xab,
	0x03, 0xb5, 0xb6, 0x07, 0x6a, 0xed, 0x0e, 0xd4, 0xfa, 0x3d, 0x39, 0xb3, 0x61, 0x82, 0x28, 0x85,
	0xfe, 0x0f, 0xf5, 0xa2, 0xed, 0xd8, 0xea, 0x2c, 0xba, 0xc6, 0x55, 0xfc, 0xbc, 0xf9, 0xef, 0x2f,
	0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xf9, 0x09, 0xaa, 0xdb, 0x01, 0x00, 0x00,
}

func (m *ClaimRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActionCompleted) > 0 {
		for iNdEx := len(m.ActionCompleted) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.ActionCompleted[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintClairdrop(dAtA, i, uint64(len(m.ActionCompleted)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InitalClaimableAmount) > 0 {
		for iNdEx := len(m.InitalClaimableAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitalClaimableAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClairdrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintClairdrop(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClairdrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovClairdrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClairdrop(uint64(l))
	}
	if len(m.InitalClaimableAmount) > 0 {
		for _, e := range m.InitalClaimableAmount {
			l = e.Size()
			n += 1 + l + sovClairdrop(uint64(l))
		}
	}
	if len(m.ActionCompleted) > 0 {
		n += 1 + sovClairdrop(uint64(len(m.ActionCompleted))) + len(m.ActionCompleted)*1
	}
	return n
}

func sovClairdrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClairdrop(x uint64) (n int) {
	return sovClairdrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClairdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClairdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClairdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClairdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitalClaimableAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClairdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClairdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClairdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitalClaimableAmount = append(m.InitalClaimableAmount, types.Coin{})
			if err := m.InitalClaimableAmount[len(m.InitalClaimableAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClairdrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActionCompleted = append(m.ActionCompleted, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClairdrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClairdrop
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClairdrop
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ActionCompleted) == 0 {
					m.ActionCompleted = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClairdrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActionCompleted = append(m.ActionCompleted, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCompleted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClairdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClairdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClairdrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClairdrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClairdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClairdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClairdrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClairdrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClairdrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClairdrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClairdrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClairdrop = fmt.Errorf("proto: unexpected end of group")
)
