syntax = "proto3";

package galaxy.brand;

import "gogoproto/gogo.proto";
import "galaxy/brand/brand.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";

option go_package = "github.com/galaxies-labs/galaxy/x/brand/types";


service Query {
    // Brands queries all Brands
    rpc Brands(QueryBrandsRequest) returns (QueryBrandsResponse) {
        option (google.api.http).get = "/galaxy/brand/brands";
    }

     // Brand queries and Brand based on it's id
    rpc Brand(QueryBrandRequest) returns (QueryBrandResponse) {
        option (google.api.http).get = "/galaxy/brand/brands/{brand_id}";
    }

    // BrandsByOwner queries all Brands by owner address
    rpc BrandsByOwner(QueryBrandsByOwnerRequest) returns (QueryBrandsByOwnerResponse) {
        option (google.api.http).get = "/galaxy/brand/brands/by_owner";
    }
}

message QueryBrandsRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryBrandsResponse {
    repeated Brand brands = 1 [(gogoproto.nullable) = false];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBrandRequest {
    string brand_id = 1;
}

message QueryBrandResponse {
    Brand brand = 1 [(gogoproto.nullable) = false];
}

message QueryBrandsByOwnerRequest {
    string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryBrandsByOwnerResponse {
    repeated Brand brands = 1 [(gogoproto.nullable) = false];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
