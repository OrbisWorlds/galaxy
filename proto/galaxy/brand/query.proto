syntax = "proto3";

package galaxy.brand;

import "gogoproto/gogo.proto";
import "galaxy/brand/brand.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";

option go_package = "github.com/galaxies-labs/galaxy/x/brand/types";


service Query {
    // ListBrand queries all Brands
    rpc ListBrand(QueryListBrandRequest) returns (QueryListBrandResponse) {
        option (google.api.http).get = "/galaxy/brand/brands";
    }

     // GetBrand queries and Brand based on it's id
    rpc GetBrand(QueryGetBrandRequest) returns (QueryGetBrandResponse) {
        option (google.api.http).get = "/galaxy/brand/brands/{brand_id}";
    }

    // ListBrandByOwner queries all Brands by owner address
    rpc ListBrandByOwner(QueryListBrandByOwnerRequest) returns (QueryListBrandByOwnerResponse) {
        option (google.api.http).get = "/galaxy/brand/brands/by_owner";
    }
}

message QueryListBrandRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryListBrandResponse {
    repeated Brand brands = 1 [(gogoproto.nullable) = false];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBrandRequest {
    string brand_id = 1;
}

message QueryGetBrandResponse {
    Brand brand = 1 [(gogoproto.nullable) = false];
}

message QueryListBrandByOwnerRequest {
    string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryListBrandByOwnerResponse {
    repeated Brand brands = 1 [(gogoproto.nullable) = false];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
